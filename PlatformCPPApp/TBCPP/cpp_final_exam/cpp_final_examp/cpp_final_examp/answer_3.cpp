#include <iostream>
#include <string>

int main()
{
	std::string capsule = "캡슐화는 외부에서 코드가 어떻게 작성되어 있는지 알 수 없다.\n그래서 사용자는 내부로직에 신경을 쓰지 않고 해당 기능을 가져와서 사용하기만 하면 된다.";

	std::cout << "1. 캡슐화(은닉성)" << std::endl;
	std::cout << capsule << std::endl;
	std::cout << std::endl;

	std::string  inherit = "상속은 부모 클래스의 기능들을 자식 클래스에게 자신의 멤버 변수와 멤버 함수를 상속해 줄 수 있다.\
	\n그렇게 되면 자식 클래스들은 부모 클래스의 변수와 기능들을 가져와 사용할 수 있으며 코드의 중복을 줄일 수 있다.";

	std::cout << "2. 상속" << std::endl;
	std::cout << inherit << std::endl;
	std::cout << std::endl;

	std::string poly = "다형성은 같은 이름으로 다양한 함수를 사용하게 해준다. \
	\n크게 오버로딩과 오버라이딩이 있다.  \
	\n오버로딩은 같은 이름의 함수를 변수의 타입이나 크기만 바꾸어서 사용하게 해주고 \
	\n오버라이딩은 자식 클래스가 부모클래스로부터 함수를 가져와 기능을 다르게 정의하여 사용할 수 있게 해준다.\n";

	std::cout << "3. 다형성" << std::endl;
	std::cout << poly << std::endl;
	std::cout << std::endl;

	std::string abstract = "부모 클래스에서 함수의 이름과 변수의 타입과 크기만 지정해주면 자식 클래스에서는 정해진 타입에 맞추어서 기능을 정의하여 사용할 수 있다.";
	std::cout << "4. 추상화" << std::endl;
	std::cout << abstract << std::endl;
	std::cout << std::endl;


	//캡슐화(은닉성)
	//// 캡슐화는 외부에서 코드가 어떻게 작성되어 있는지 알 수 없다. 그래서 사용자는 내부로직에 신경을 쓰지 않고 해당 기능을 가져와서 사용하기만 하면 된다.
 
	
	//상속
	//// 상속은 부모 클래스의 기능들을 자식 클래스에게 자신의 멤버 변수와 멤버 함수를 상속해 줄 수 있다. 
	//// 그렇게 되면 자식 클래스들은 부모 클래스의 변수와 기능들을 가져와 사용할 수 있으며 코드의 중복을 줄일 수 있다.
	//다형성
	//// 다형성은 같은 이름으로 다양한 함수를 사용하게 해준다.
	//..  크게 오버로딩과 오버라이딩이 있다.
	//// 오버로딩은 같은 이름의 함수를 변수의 타입이나 크기만 바꾸어서 사용하게 해주고 
	//// 오버라이딩은 자식 클래스가 부모클래스로부터 함수를 가져와 기능을 다르게 정의하여 사용할 수 있게 해준다.
	//// 
	////
	//추상화
	//// 부모 클래스에서 함수의 이름과 변수의 타입과 크기만 지정해주면 자식 클래스에서는 정해진 타입에 맞추어서 기능을 정의하여 사용할 수 있다.


	int z = 4;
}